# $Id: Makefile.general,v 1.56 2009/03/31 13:41:03 franklan Exp $
#	MAKEFILE for KaliVeda shared library libKVMultiDet.so
#
# NOTE: You must set the environment variable KVROOT before using
#	this Makefile. KVROOT should contain the full path of the
#	directory where you want the KaliVeda environment installed.
#
#---------------------------------------------------------------------------
# ***********    DO NOT CHANGE ANYTHING THAT FOLLOWS    ****************** #
#---------------------------------------------------------------------------

ifeq (,$(wildcard $(ROOT_MAKEFILE_PATH)/Makefile.arch))
ObjSuf        = o
ExeSuf        =
DllSuf        = so
OutPutOpt     = -o # keep whitespace after "-o"
RC           := root-config
ROOTCFLAGS   := $(shell $(RC) --cflags)
ROOTLDFLAGS  := $(shell $(RC) --ldflags)
ROOTLIBS     := $(shell $(RC) --libs)
ROOTGLIBS    := $(shell $(RC) --glibs)
OPT2          = -O2
CXX           = g++
CXXFLAGS      = $(OPT2) -Wall -fPIC
LD            = g++
LDFLAGS       = $(OPT2)
SOFLAGS       = -shared
CXXFLAGS     += $(ROOTCFLAGS)
LDFLAGS      += $(ROOTLDFLAGS)
LIBS          = $(ROOTLIBS) $(SYSLIBS)
GLIBS         = $(ROOTGLIBS) $(SYSLIBS)
else
include $(ROOT_MAKEFILE_PATH)/Makefile.arch
endif
LDFLAGS += -Wl,--no-as-needed -Wl,--no-undefined

SrcSuf	= cpp

#------------------------------------------------------------------------------

.SUFFIXES: .$(SrcSuf) .$(ObjSuf) .$(DllSuf)

#Location of KaliVeda project sources root directory relative to subprojects which 'include' this Makefile
#Override in project's Makefile if it is not simply a subdirectory of KaliVeda
KVPROJ_ROOT = ..

#make list of all .cpp files in all subdirectories
TEMPSOU := $(patsubst %, %/*.cpp, $(MODULE))
ALL_SOURCES := $(wildcard $(TEMPSOU))
#apply wildcard to user's NOT_READY list in case there are '*.cpp' in it
ALL_NOT_READY := $(wildcard $(NOT_READY))
#the header files
ALL_NOT_READY_H := $(patsubst %.cpp,%.h,$(ALL_NOT_READY))
#list of all .cpp except the not_ready ones
SOURCES := $(filter-out $(ALL_NOT_READY),$(ALL_SOURCES))
	  
#define "include" paths to find all the *.h files
KV_INC := -I$(MODULE)
KV_INC += $(KV_INC_EXTRAS) -I$(KVPROJ_ROOT)

HEADERS = $(SOURCES:%.cpp=%.h) $(EXTRA_HEADERS)

####################################
# DICTIONARIES
# list of dictionaries by module (subdirectory)
DICT_SOURCES := $(patsubst %, $(PROJ_NAME)%Dict.$(SrcSuf), $(MODULE))
DICT_HEADERS := $(patsubst %.$(SrcSuf),%.h,$(DICT_SOURCES))
DICT_OBJECTS := $(patsubst %.$(SrcSuf),%.$(ObjSuf),$(DICT_SOURCES))

#apply wildcard to user's NOT_ROOTCINT list in case there are '*.h' in it
ALL_NOT_ROOTCINT := $(wildcard $(NOT_ROOTCINT))
#list of all headers to use with rootcint
ROOTCINT_HEADERS := $(filter-out $(ALL_NOT_ROOTCINT),$(HEADERS))
	  
OBJECTS = $(SOURCES:%.cpp=%.$(ObjSuf)) 

PREREQ = $(SOURCES:%.cpp=%.d)

LIBRARY = lib$(PROJ_NAME)$(MODULE)
DIST_DIR = $(LIBRARY)-$(VERSION_NUMBER)

LIB_SO = $(LIBRARY).$(DllSuf)
LIBVERSION = $(LIBRARY).$(DllSuf).$(VERSION_NUMBER)

RLIBMAPDEPS := 

LIB_LIB      = $(LIB_SO)

CPOPT = -u

#-------------------------------------------------------------------------------------------

#CXXFLAGS without optimisation for compilation of dictionaries
#without this we cannot use NamespaceImp (in e.g. KVTGIDFunctions)
OPT = -O
OPT2 = -O2 
OPT3 = -O3 
TMPFLAGS := $(filter-out $(OPT2),$(CXXFLAGS))
CXXFLAGS_NOOPT = $(filter-out $(OPT),$(TMPFLAGS))

#debugging/profiling/memchecking on linux machine
ifeq ($(PLATFORM),linux)
ifeq ($(debug),yes)
CXXFLAGS_NOOPT += -g
CXXFLAGS := $(CXXFLAGS_NOOPT) $(OPT)
LDFLAGS := $(ROOTLDFLAGS) -g $(OPT) -Wl,--no-as-needed -Wl,--no-undefined
else
CXXFLAGS := $(CXXFLAGS_NOOPT) $(OPT3)
LDFLAGS := $(ROOTLDFLAGS) $(OPT3) -Wl,--no-as-needed -Wl,--no-undefined
endif
ifeq ($(memcheck),yes)
CXXFLAGS_NOOPTS += -g -fno-inline
CXXFLAGS := $(CXXFLAGS_NOOPT)
LDFLAGS += -g -fno-inline -Wl,--no-as-needed -Wl,--no-undefined
endif
ifeq ($(profile),yes)
CXXFLAGS += -g -pg
LDFLAGS += -g -pg -Wl,--no-as-needed -Wl,--no-undefined
endif
endif

STRICT_WARNINGS = -Wall -Wextra \
	-Werror=overloaded-virtual -Werror=non-virtual-dtor -Werror=type-limits \
	-Werror=sign-compare -Werror=unused-but-set-variable \
	-Wno-format-security -Wno-unused-parameter -Wunused-but-set-parameter -Wunused-variable
ALL_CXXFLAGS = $(STRICT_WARNINGS) $(CXXFLAGS) $(KV_INC)
ALL_CXXFLAGS_NOOPT = $(STRICT_WARNINGS) $(CXXFLAGS_NOOPT) $(KV_INC)

MANIP_DATA = 
ifneq ($(MANIP_DIRS), )
MANIP_DATA = copymanipdirs
endif

.PHONY : all clean install uninstall removemoduledirs copymanipdirs rootlibmap

all : dictionaries $(LIB_SO) $(EXTRAS) $(MODULE)/.copyheads

dictionaries:
	@make -f $(KVPROJ_ROOT)/MakeDict.mk MODULE=$(MODULE) LIBNAME=$(PROJ_NAME) RLIBMAPDEPS="$(RLIBMAPDEPS)" INCLUDE="$(KV_INC)" EXCLUDE="$(ALL_NOT_READY_H) $(ALL_NOT_ROOTCINT)" DICT_COMPILE_FLAGS="$(ALL_CXXFLAGS_NOOPT)"

$(LIB_SO): $(OBJECTS) $(DICT_OBJECTS)
	@echo `tput setaf 5`"Building library $@"`tput sgr0`; \
	$(LD) $(SOFLAGS) $(LDFLAGS) $^ $(GLIBS) $(LINK_LIB) $(OutPutOpt) $@ $(EXPLLINKLIBS) ;\
	[ $$? -ne 0 ] && exit 1; \
	echo `tput setaf 5`"$@ done"`tput sgr0`

.SUFFIXES: .$(SrcSuf)

###

clean :
	@-rm -f $(PREREQ) $(OBJECTS) $(DICT_SOURCES) $(DICT_HEADERS) $(DICT_OBJECTS) $(LIBRARY).*
	@-rm -f $(MODULE)/.copyheads $(MODULE)/.config
	@-rm -f *.pcm

$(MODULE)/.copyheads: $(HEADERS)
	@-cp $? $(KVINSTALLDIR)/include/
	@-touch $(MODULE)/.copyheads

dist :
	-mkdir $(DIST_DIR)
	-rm -f .copyheads .config .copysource
	-cp $(SOURCES) $(DIST_DIR)/
	-cp $(HEADERS) $(DIST_DIR)/
	-cp -r $(ETC_DATA) $(DIST_DIR)/
	-cp -r $(MANIP_DIRS) $(DIST_DIR)/
	-cp Makefile $(DIST_DIR)/
ifeq ($(PROJ_NAME),KVIndra)
	-mkdir $(DIST_DIR)/INDRA2ROOT
	-cp INDRA2ROOT/* $(DIST_DIR)/INDRA2ROOT/
endif
	-tar czf $(DIST_DIR).tgz $(DIST_DIR)
	-mv $(DIST_DIR).tgz ../$(DIST_DIR).tgz
	-rm -Rf $(DIST_DIR)

install : $(MANIP_DATA)
ifeq ( $(KVINSTALLDIR),)
	@echo "KVROOT environment variable doesn't seem to be set."
	@echo "You must set it in order to install KaliVeda project files"
	@echo "use 'setenv KVROOT install_path' (shell)"
	@echo "or  'export KVROOT=install_path' (bash)"
	@echo "use 'make install' to perform the installation"
else
ifneq ($(ETC_DATA), )
	@echo "--------------------------------------------------------------------------------"
	@echo "ETC_DATA = |"$(ETC_DATA)"|"
	@echo "--------------------------------------------------------------------------------"
	-cp -r $(CPOPT) $(ETC_DATA) $(KVINSTALLDIR)/KVFiles/
endif
ifneq ($(PLATFORM),win32)
	@-cp $(LIB_LIB) $(KVINSTALLDIR)/lib/$(LIBVERSION)
	@-rm -f $(KVINSTALLDIR)/lib/$(LIB_LIB)
	@ln -s $(KVINSTALLDIR)/lib/$(LIBVERSION) $(KVINSTALLDIR)/lib/$(LIB_LIB)
endif
ifeq ($(PLATFORM),macosx)
	 -cp $(LIB_DY) $(KVINSTALLDIR)/lib/$(LIBDYVERSION)
	 -rm -f $(KVINSTALLDIR)/lib/$(LIB_DY)
	 ln -s $(KVINSTALLDIR)/lib/$(LIBDYVERSION) $(KVINSTALLDIR)/lib/$(LIB_DY)
endif
  endif
ifeq ($(SITE),CCIN2P3)
ifeq ($(PROJ_NAME),KVIndra)
	$(MAKE) indra2root
endif
endif

removemoduledirs :
	$(foreach subdir,$(MODULE),$(shell rm -f $(KVINSTALLDIR)/include/$(subdir)))

uninstall :
	cd $(KVINSTALLDIR)/src && rm -f $(SOURCES)
	-rm -f .copysource
	cd $(KVINSTALLDIR)/include && rm -f $(HEADERS)
	-rm -f .copyheads
ifeq ($(ARCH),win32)
	-rm -f $(KVINSTALLDIR)/bin/$(LIB_SO) 
	-rm -f $(KVINSTALLDIR)/lib/$(LIB_LIB) 
else
	-rm -f $(KVINSTALLDIR)/lib/$(LIB_LIB) 
endif
ifneq ($(ETC_DATA), )
	cd $(KVINSTALLDIR)/KVFiles && rm -rf $(ETC_DATA)
endif
ifneq ($(MANIP_DIRS), )
	cd $(KVINSTALLDIR)/KVFiles && rm -rf $(MANIP_DIRS)
endif
ifneq ($(PLATFORM),win32)
	-rm -f $(KVINSTALLDIR)/lib/$(LIB_LIB)
	-rm -f $(KVINSTALLDIR)/lib/$(LIBVERSION)
endif
ifeq ($(PLATFORM),macosx)
	 -rm -f $(KVINSTALLDIR)/lib/$(LIB_DY)
	 -rm -f $(KVINSTALLDIR)/lib/$(LIBDYVERSION)
endif

# recursively copy contents of each directory 'manip_dir' named in variable MANIP_DIRS
# into corresponding directory in installation, $KVROOT/KVFiles/manip_dir.
# in each directory, create a mini-Makefile with database file
# ($KVROOT/db/manip_dir/DataBase.root) as target, and as prerequisites
# all files in $KVROOT/KVFiles/manip_dir
copymanipdirs :
	@for manip_dir in $(MANIP_DIRS); do \
		cp -r $(CPOPT) $$manip_dir $(KVINSTALLDIR)/KVFiles/ ; \
		echo '$$''(KVROOT)/db/'$$manip_dir"/DataBase.root : "`ls $$manip_dir` > $(KVINSTALLDIR)/KVFiles/$$manip_dir/Makefile ; \
		echo "	@echo Database needs update" >> $(KVINSTALLDIR)/KVFiles/$$manip_dir/Makefile ; \
	done

$(MODULE)/.config : $(HEADERS) $(SOURCES)
	@echo "--------------------------------------------------------------------------------"
	@echo "CONFIGURATION OF MAKEFILE FOR "$(PROJ_NAME)/$(MODULE)
	@echo "--------------------------------------------------------------------------------"
	@echo "SOURCES = "$(SOURCES)
	@echo "--------------------------------------------------------------------------------"
	@echo "HEADERS = "$(HEADERS)
	@echo "--------------------------------------------------------------------------------"
	@echo "OBJECTS = "$(OBJECTS)
	@echo "--------------------------------------------------------------------------------"
	@echo "DICT_OBJECTS = "$(DICT_OBJECTS)
	@echo "--------------------------------------------------------------------------------"
	@echo "ETC_DATA = "$(ETC_DATA)
	@echo "--------------------------------------------------------------------------------"
	@echo "MANIP_DIRS = "$(MANIP_DIRS)
	@echo "--------------------------------------------------------------------------------"
	@echo "KV_INC = "$(KV_INC)
	@echo "--------------------------------------------------------------------------------"
	@echo "CXXFLAGS = "$(CXXFLAGS)
	@echo "--------------------------------------------------------------------------------"
	@echo "CXXFLAGS_NOOPT = "$(CXXFLAGS_NOOPT)
	@echo "--------------------------------------------------------------------------------"
	@echo "ALL_CXXFLAGS = "$(ALL_CXXFLAGS)
	@echo "--------------------------------------------------------------------------------"
	@echo "ALL_CXXFLAGS_NOOPT = "$(ALL_CXXFLAGS_NOOPT)
	@echo "--------------------------------------------------------------------------------"
	@echo "LINK_LIB = "$(LINK_LIB)
	@echo "--------------------------------------------------------------------------------"
	@echo "LDFLAGS = "$(LDFLAGS)
	@echo "--------------------------------------------------------------------------------"
	@echo "SOFLAGS = "$(SOFLAGS)
	@echo "--------------------------------------------------------------------------------"
	@echo "LIBRARY = "$(LIB_SO)
	@echo "--------------------------------------------------------------------------------"
	@echo "KVPROJ_ROOT_ABS = "$(KVPROJ_ROOT_ABS)
	@echo "--------------------------------------------------------------------------------"
	@echo "KVINSTALLDIR = "$(KVINSTALLDIR)
	@echo "--------------------------------------------------------------------------------"
	@echo "CXX = "$(CXX)
	@echo "--------------------------------------------------------------------------------"
	@echo "ARCH = "$(ARCH)
	@echo "--------------------------------------------------------------------------------"
#touch $(MODULE)/.config


.$(SrcSuf).$(ObjSuf):
	@echo `tput setaf 1`"   CXX $<..."`tput sgr0`
	@$(CXX) $(ALL_CXXFLAGS) $(OutPutOpt)$@ -c $<
        
%.d : %.cpp
	@echo `tput setaf 3`"Analysing dependencies of $^"`tput sgr0`; 
	@set -e; rm -f $@; \
	$(CXX) -MM -MT $(subst .cpp,.$(ObjSuf),$<) $(ALL_CXXFLAGS) $< > $@
	
##### Include all the *.o target rules generated by gcc -MM #####
##### However, if we are cleaning or checking config or making #####
##### logs, we don't include this file since it may screw up things #####
ifeq ($(findstring $(MAKECMDGOALS), clean config logs uninstall-indra2root),)
-include $(PREREQ)
endif
