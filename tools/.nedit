! Preferences file for NEdit
!
! This file is overwritten by the "Save Defaults..." command in NEdit 
! and serves only the interactively settable options presented in the NEdit
! "Preferences" menu.  To modify other options, such as key bindings, use 
! the .Xdefaults file in your home directory (or the X resource 
! specification method appropriate to your system).  The contents of this 
! file can be moved into an X resource file, but since resources in this file
! override their corresponding X resources, either this file should be 
! deleted or individual resource lines in the file should be deleted for the
! moved lines to take effect.

nedit.fileVersion: 5.5
nedit.shellCommands: \
	spell:Alt+B:s:EX:\n\
		cat>spellTmp; xterm -e ispell -x spellTmp; cat spellTmp; rm spellTmp\n\
	wc::w:ED:\n\
		wc | awk '{print $1 " lines, " $2 " words, " $3 " characters"}'\n\
	sort::o:EX:\n\
		sort\n\
	number lines::n:AW:\n\
		nl -ba\n\
	make:Alt+Z:m:W:\n\
		make\n\
	expand::p:EX:\n\
		expand\n\
	unexpand::u:EX:\n\
		unexpand\n
nedit.macroCommands: \
	Complete Word:Alt+D::: {\n\
		# Tuning parameters\n\
		ScanDistance = 200\n\
		\n\
		# Search back to a word boundary to find the word to complete\n\
		startScan = max(0, $cursor - ScanDistance)\n\
		endScan = min($text_length, $cursor + ScanDistance)\n\
		scanString = get_range(startScan, endScan)\n\
		keyEnd = $cursor-startScan\n\
		keyStart = search_string(scanString, "<", keyEnd, "backward", "regex")\n\
		if (keyStart == -1)\n\
		    return\n\
		keyString = "<" substring(scanString, keyStart, keyEnd)\n\
		\n\
		# search both forward and backward from the cursor position.  Note that\n\
		# using a regex search can lead to incorrect results if any of the special\n\
		# regex characters is encountered, which is not considered a delimiter\n\
		backwardSearchResult = search_string(scanString, keyString, keyStart-1, \\\n\
		    	"backward", "regex")\n\
		forwardSearchResult = search_string(scanString, keyString, keyEnd, "regex")\n\
		if (backwardSearchResult == -1 && forwardSearchResult == -1) {\n\
		    beep()\n\
		    return\n\
		}\n\
		\n\
		# if only one direction matched, use that, otherwise use the nearest\n\
		if (backwardSearchResult == -1)\n\
		    matchStart = forwardSearchResult\n\
		else if (forwardSearchResult == -1)\n\
		    matchStart = backwardSearchResult\n\
		else {\n\
		    if (keyStart - backwardSearchResult <= forwardSearchResult - keyEnd)\n\
		    	matchStart = backwardSearchResult\n\
		    else\n\
		    	matchStart = forwardSearchResult\n\
		}\n\
		\n\
		# find the complete word\n\
		matchEnd = search_string(scanString, ">", matchStart, "regex")\n\
		completedWord = substring(scanString, matchStart, matchEnd)\n\
		\n\
		# replace it in the window\n\
		replace_range(startScan + keyStart, $cursor, completedWord)\n\
	}\n\
	Fill Sel. w/Char:::R: {\n\
		if ($selection_start == -1) {\n\
		    beep()\n\
		    return\n\
		}\n\
		\n\
		# Ask the user what character to fill with\n\
		fillChar = string_dialog("Fill selection with what character?", "OK", "Cancel")\n\
		if ($string_dialog_button == 2 || $string_dialog_button == 0)\n\
		    return\n\
		\n\
		# Count the number of lines in the selection\n\
		nLines = 0\n\
		for (i=$selection_start; i<$selection_end; i++)\n\
		    if (get_character(i) == "\\n")\n\
		    	nLines++\n\
		\n\
		# Create the fill text\n\
		rectangular = $selection_left != -1\n\
		line = ""\n\
		fillText = ""\n\
		if (rectangular) {\n\
		    for (i=0; i<$selection_right-$selection_left; i++)\n\
			line = line fillChar\n\
		    for (i=0; i<nLines; i++)\n\
			fillText = fillText line "\\n"\n\
		    fillText = fillText line\n\
		} else {\n\
		    if (nLines == 0) {\n\
		    	for (i=$selection_start; i<$selection_end; i++)\n\
		    	    fillText = fillText fillChar\n\
		    } else {\n\
		    	startIndent = 0\n\
		    	for (i=$selection_start-1; i>=0 && get_character(i)!="\\n"; i--)\n\
		    	    startIndent++\n\
		    	for (i=0; i<$wrap_margin-startIndent; i++)\n\
		    	    fillText = fillText fillChar\n\
		    	fillText = fillText "\\n"\n\
			for (i=0; i<$wrap_margin; i++)\n\
			    line = line fillChar\n\
			for (i=0; i<nLines-1; i++)\n\
			    fillText = fillText line "\\n"\n\
			for (i=$selection_end-1; i>=$selection_start && get_character(i)!="\\n"; \\\n\
			    	i--)\n\
			    fillText = fillText fillChar\n\
		    }\n\
		}\n\
		\n\
		# Replace the selection with the fill text\n\
		replace_selection(fillText)\n\
	}\n\
	Quote Mail Reply:::: {\n\
		if ($selection_start == -1)\n\
		    replace_all("^.*$", "\\\\> &", "regex")\n\
		else\n\
		    replace_in_selection("^.*$", "\\\\> &", "regex")\n\
	}\n\
	Unquote Mail Reply:::: {\n\
		if ($selection_start == -1)\n\
		    replace_all("(^\\\\> )(.*)$", "\\\\2", "regex")\n\
		else\n\
		    replace_in_selection("(^\\\\> )(.*)$", "\\\\2", "regex")\n\
	}\n\
	C Comments>Comment Out Sel.@C@C++:::R: {\n\
		selStart = $selection_start\n\
		selEnd = $selection_end\n\
		replace_range(selStart, selEnd, "/* " get_selection() " */")\n\
		select(selStart, selEnd + 6)\n\
	}\n\
	C Comments>C Uncomment Sel.@C@C++:::R: {\n\
		sel = get_selection()\n\
		selStart = $selection_start\n\
		selEnd = $selection_end\n\
		commentStart = search_string(sel, "/*", 0)\n\
		if (substring(sel, commentStart+2, commentStart+3) == " ")\n\
		    keepStart = commentStart + 3\n\
		else\n\
		    keepStart = commentStart + 2\n\
		keepEnd = search_string(sel, "*/", length(sel), "backward")\n\
		commentEnd = keepEnd + 2\n\
		if (substring(sel, keepEnd - 1, keepEnd) == " ")\n\
		    keepEnd = keepEnd - 1\n\
		replace_range(selStart + commentStart, selStart + commentEnd, \\\n\
			substring(sel, keepStart, keepEnd))\n\
		select(selStart, selEnd - (keepStart-commentStart) - \\\n\
			(commentEnd - keepEnd))\n\
	}\n\
	C Comments>+ C++ Comment@C++:::R: {\n\
		replace_in_selection("^.*$", "// &", "regex")\n\
	}\n\
	C Comments>- C++ Comment@C++:::R: {\n\
		replace_in_selection("(^[ \\\\t]*// ?)(.*)$", "\\\\2", "regex")\n\
	}\n\
	C Comments>+ C Bar Comment 1@C:::R: {\n\
		if ($selection_left != -1) {\n\
		    dialog("Selection must not be rectangular")\n\
		    return\n\
		}\n\
		start = $selection_start\n\
		end = $selection_end-1\n\
		origText = get_range($selection_start, $selection_end-1)\n\
		newText = "/*\\n" replace_in_string(get_range(start, end), \\\n\
			"^", " * ", "regex") "\\n */\\n"\n\
		replace_selection(newText)\n\
		select(start, start + length(newText))\n\
	}\n\
	C Comments>- C Bar Comment 1@C:::R: {\n\
		selStart = $selection_start\n\
		selEnd = $selection_end\n\
		newText = get_range(selStart+3, selEnd-4)\n\
		newText = replace_in_string(newText, "^ \\\\* ", "", "regex")\n\
		replace_range(selStart, selEnd, newText)\n\
		select(selStart, selStart + length(newText))\n\
	}\n\
	Make C Prototypes@C@C++:::: {\n\
		if ($selection_start == -1) {\n\
		    start = 0\n\
		    end = $text_length\n\
		} else {\n\
		    start = $selection_start\n\
		    end = $selection_end\n\
		}\n\
		string = get_range(start, end)\n\
		nDefs = 0\n\
		searchPos = 0\n\
		prototypes = ""\n\
		staticPrototypes = ""\n\
		for (;;) {\n\
		    headerStart = search_string(string, \\\n\
			    "^[a-zA-Z]([^;#\\"'{}=><!/]|\\n)*\\\\)[ \\t]*\\n?[ \\t]*\\\\{", \\\n\
			    searchPos, "regex")\n\
		    if (headerStart == -1)\n\
			break\n\
		    headerEnd = search_string(string, ")", $search_end,"backward") + 1\n\
		    prototype = substring(string, headerStart, headerEnd) ";\\n"\n\
		    if (substring(string, headerStart, headerStart+6) == "static")\n\
			staticPrototypes = staticPrototypes prototype\n\
		    else\n\
		    			prototypes = prototypes prototype\n\
		    searchPos = headerEnd\n\
		    nDefs++\n\
		}\n\
		if (nDefs == 0) {\n\
		    dialog("No function declarations found")\n\
		    return\n\
		}\n\
		new()\n\
		focus_window("last")\n\
		replace_range(0, 0, prototypes staticPrototypes)\n\
	}\n
nedit.bgMenuCommands: \
	Undo:::: {\n\
		undo()\n\
	}\n\
	Redo:::: {\n\
		redo()\n\
	}\n\
	Cut:::R: {\n\
		cut_clipboard()\n\
	}\n\
	Copy:::R: {\n\
		copy_clipboard()\n\
	}\n\
	Paste:::: {\n\
		paste_clipboard()\n\
	}\n
nedit.highlightPatterns: Ada:Default\n\
	Awk:Default\n\
	C++:1:0{\n\
		comment:"/\\*":"\\*/"::Comment::\n\
		cplus comment:"//":"$"::Comment::\n\
		string:"""":"""":"\\n":Storage Type::\n\
		preprocessor line:"^[ \\t]*#":"$"::Preprocessor::\n\
		string escape chars:"\\\\(.|\\n)":::String1:string:\n\
		preprocessor esc chars:"\\\\(.|\\n)":::Preprocessor1:preprocessor line:\n\
		preprocessor comment:"/\\*":"\\*/"::Comment:preprocessor line:\n\
		preproc cplus comment:"//":"$"::Comment:preprocessor line:\n\
		character constant:"'":"'":"[^\\\\][^']":Character Const::\n\
		numeric constant:"<((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f)?|(k[A-Za-z0-9]*)>":::Numeric Const::D\n\
		storage keyword:"<(class|typename|typeid|template|friend|virtual|inline|explicit|operator|public|private|protected|const|extern|auto|register|static|mutable|unsigned|signed|volatile|char|double|float|int|long|short|bool|wchar_t|void|typedef|struct|union|enum|asm|export)>":::Storage Type::D\n\
		keyword:"<(new|delete|this|return|goto|if|else|case|default|switch|break|continue|while|do|for|try|catch|throw|sizeof|true|false|namespace|using|dynamic_cast|static_cast|reinterpret_cast|const_cast)>":::Keyword::D\n\
		braces:"[{}]":::Keyword::D\n\
		root storage:"<(Double_t|Int_t|Char_t|Option_t|Bool_t|Short_t|Long_t|Color_t|Float_t|UShort_t|ULong_t|UInt_t|UChar_t)>":::Storage Type1::\n\
		ROOT class:"<(T[A-Za-z0-9]*)>":::Class::\n\
		KaliVeda class:"<(KV[A-Za-z0-9_]*)>":::Class2::\n\
	}\n\
	C:Default\n\
	Fortran:1:0{\n\
		comment:"<(!|C|c|\\*)>":"$"::Comment::\n\
		subroutine:"<((s|S)ubroutine|(p|P)rogram)>":::Subroutine::\n\
		function:"(<(f|F)unction>)":::Subroutine1::\n\
		common block:"/[a-zA-Z_ ]*/":::Identifier::\n\
		string constant:"'":"'":"$":String1::\n\
		numeric constant:"<((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f)?>":::Numeric Const::D\n\
		storage keyword:"<((i|I)nteger(\\*[0-9]*)?|INTEGER(\\*[0-9]*)?|(c|C)haracter(\\*[0-9]*)?|CHARACTER(\\*[0-9])?|(r|R)eal(\\*[0-9]*)?|REAL(\\*[0-9])?)|(l|L)ogical(\\*[0-9]*)?|LOGICAL(\\*[0-9])?>":::Storage Type::\n\
		keyword:"<((i|I)nclude|(e|E)xternal|(c|C)ommon|(d|D)ata|(r|R)ecord|(i|I)(f|F)|(t|T)hen|(e|E)ndif|(d|D)(o|O)|(e|E)nddo|(p|P)rint\\*|(p|P)rint \\*|(p|P)rint|(c|C)all|(r|R)eturn|(w|W)rite|(e|E)lseif|(e|E)lse|(e|E)nd|(g|G)oto|(g|G)o (t|T)o|(c|C)ontinue|(o|O)pen|(c|C)lose|(i|I)mplicit|(n|N)one)>":::Keyword::\n\
	}\n\
	SGML HTML:Default\n\
	Makefile:Default\n\
	CSS2:1:0{\n\
		info:"(?# pattern set for CSS1 and CSS2; for use with NEdit 5.1.1 and higher; Joor Loohuis, joor@nl.linux.org)":::Plain::D\n\
		comment:"/\\*":"\\*/"::Comment::\n\
		import rule:"@import\\s+(url\\([^)]+\\))\\s*":";"::Warning::\n\
		import delim:"&":"&"::Preprocessor:import rule:C\n\
		import url:"\\1":::Subroutine1:import rule:C\n\
		import media:"(all|screen|print|projection|aural|braille|embossed|handheld|tty|tv|,)":::Preprocessor1:import rule:\n\
		media rule:"(@media)\\s+":"(?=\\{)"::Warning::\n\
		media delim:"&":"&"::Preprocessor:media rule:C\n\
		media type:"(all|screen|print|projection|aural|braille|embossed|handheld|tty|tv|,)":::Preprocessor1:media rule:\n\
		charset rule:"@charset\\s+(""[^""]+"")\\s*;":::Preprocessor::\n\
		charset name:"\\1":::String:charset rule:C\n\
		font-face rule:"@font-face":::Preprocessor::\n\
		page rule:"@page":"(?=\\{)"::Preprocessor1::\n\
		page delim:"&":"&"::Preprocessor:page rule:C\n\
		page pseudo class:":(first|left|right)":::Storage Type:page rule:\n\
		declaration:"\\{":"\\}"::Warning::\n\
		declaration delims:"&":"&"::Keyword:declaration:C\n\
		declaration comment:"/\\*":"\\*/"::Comment:declaration:\n\
		property:"<(azimuth|background(-(attachment|color|image|position|repeat))?|border(-(bottom(-(color|style|width))?|(-(color|style|width))?|collapse|color|left(-(color|style|width))?|right(-(color|style|width))?|spacing|style|top(-(color|style|width))?|width))?|bottom|caption-side|clear|clip|color|content|counter-(increment|reset)|cue(-(after|before))?|cursor|direction|display|elevation|empty-cells|float|font(-(family|size|size-adjust|stretch|style|variant|weight))?|height|left|letter-spacing|line-height|list-style(-(image|position|type))?|margin(-(bottom|left|right|top))?|marker-offset|marks|max-(height|width)|min-(height|width)|orphans|outline(-(color|style|width))?|overflow|padding(-(bottom|left|right|top))?|page(-break-(after|before|inside))?|pause(-(after|before))?|pitch(-range)?|play-during|position|quotes|richness|right|size|speak(-(header|numeral|punctuation))?|speech-rate|stress|table-layout|text(-(align|decoration|indent|shadow|transform))|top|unicode-bidi|vertical-align|visibility|voice-family|volume|white-space|widows|width|word-spacing|z-index)>":::Identifier1:declaration:\n\
		value:":":";":"\\}":Warning:declaration:\n\
		value delims:"&":"&"::Keyword:value:C\n\
		value modifier:"!important|inherit":::Keyword:value:\n\
		uri value:"<url\\([^)]+\\)":::Subroutine1:value:\n\
		clip value:"<rect\\(\\s*([+-]?\\d+(?:\\.\\d*)?)(in|cm|mm|pt|pc|em|ex|px)\\s*(,|\\s)\\s*([+-]?\\d+(?:\\.\\d*)?)(in|cm|mm|pt|pc|em|ex|px)\\s*(,|\\s)\\s*([+-]?\\d+(?:\\.\\d*)?)(in|cm|mm|pt|pc|em|ex|px)\\s*(,|\\s)\\s*([+-]?\\d+(?:\\.\\d*)?)(in|cm|mm|pt|pc|em|ex|px)\\s*\\)":::Subroutine:value:\n\
		function value:"<attr\\([^)]+\\)|<counter\\((\\l|\\\\([ -~\\0200-\\0377]|[\\l\\d]{1,6}\\s?))([-\\l\\d]|\\\\([ -~\\0200-\\0377]|[\\l\\d]{1,6}\\s?))*\\s*(,\\s*<(disc|circle|square|decimal|decimal-leading-zero|lower-roman|upper-roman|lower-greek|lower-alpha|lower-latin|upper-alpha|upper-latin|hebrew|armenian|georgian|cjk-ideographic|hiragana|katakana|hiragana-iroha|katakana-iroha|none)>)?\\)|<counters\\((\\l|\\\\([ -~\\0200-\\0377]|[\\l\\d]{1,6}\\s?))([-\\l\\d]|\\\\([ -~\\0200-\\0377]|[\\l\\d]{1,6}\\s?))*\\s*,\\s*(""[^""]*""|'[^']*')\\s*(,\\s*<(disc|circle|square|decimal|decimal-leading-zero|lower-roman|upper-roman|lower-greek|lower-alpha|lower-latin|upper-alpha|upper-latin|hebrew|armenian|georgian|cjk-ideographic|hiragana|katakana|hiragana-iroha|katakana-iroha|none)>)?\\)":::Subroutine:value:\n\
		color value:"(#[A-Fa-f\\d]{6}>|#[A-Fa-f\\d]{3}>|rgb\\(([+-]?\\d+(\\.\\d*)?)\\s*,\\s*([+-]?\\d+(\\.\\d*)?)\\s*,\\s*([+-]?\\d+(\\.\\d*)?)\\)|rgb\\(([+-]?\\d+(\\.\\d*)?%)\\s*,\\s*([+-]?\\d+(\\.\\d*)?%)\\s*,\\s*([+-]?\\d+(\\.\\d*)?%)\\)|<(?iaqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|purple|red|silver|teal|white|yellow)>|<transparent>)":::Text Arg2:value:\n\
		dimension value:"[+-]?(\\d*\\.\\d+|\\d+)(in|cm|mm|pt|pc|em|ex|px|deg|grad|rad|s|ms|hz|khz)>":::Numeric Const:value:\n\
		percentage value:"[+-]?(\\d*\\.\\d+|\\d+)%":::Numeric Const:value:\n\
		named value:"<(100|200|300|400|500|600|700|800|900|above|absolute|always|armenian|auto|avoid|baseline|behind|below|bidi-override|blink|block|bold|bolder|both|bottom|capitalize|caption|center(?:-left|-right)?|child|circle|cjk-ideographic|close-quote|code|collapse|compact|condensed|continuous|crop|cross(?:hair)?|cursive|dashed|decimal(?:-leading-zero)?|default|digits|disc|dotted|double|e-resize|embed|expanded|extra(?:-condensed|-expanded)|fantasy|far(?:-left|-right)|fast(?:er)?|female|fixed|georgian|groove|hebrew|help|hidden|hide|high(?:er)?|hiragana(?:-iroha)?|icon|inherit|inline(?:-table)?|inset|inside|italic|justify|katakana(?:-iroha)?|landscape|larger?|left(?:-side|wards)?|level|lighter|line-through|loud|low(?:er(?:-alpha|-greek|-latin|-roman|case)?)?|ltr|male|marker|medium|menu|message-box|middle|mix|monospace|move|n-resize|narrower|ne-resize|no(?:-close-quote|-open-quote|-repeat)|none|normal|nowrap|nw-resize|oblique|once|open-quote|out(?:set|side)|overline|pointer|portrait|pre|relative|repeat(?:-x|-y)?|ridge|right(?:-side|wards)?|rtl|run-in|s-resize|sans-serif|scroll|se-resize|semi(?:-condensed|-expanded)|separate|serif|show|silent|slow(?:er)?|small(?:-caps|-caption|er)?|soft|solid|spell-out|square|static|status-bar|sub|super|sw-resize|table(?:-caption|-cell|-column(?:-group)?|-footer-group|-header-group|-row(?:-group)?)?|text(?:-bottom|-top)?|thick|thin|top|ultra(?:-condensed|-expanded)|underline|upper(?:-alpha|-latin|-roman|case)|visible|w-resize|wait|wider|x-(?:fast|high|large|loud|low|slow|small|soft)|xx-(large|small))>":::Text Arg2:value:\n\
		integer value:"<\\d+>":::Numeric Const:value:\n\
		font family:"(?iarial|courier|impact|helvetica|lucida|symbol|times|verdana)":::String:value:\n\
		dq string value:"""":"""":"\\n":String:value:\n\
		dq string escape:"\\\\([ -~\\0200-\\0377]|[\\l\\d]{1,6}\\s?)":::Text Escape:dq string value:\n\
		dq string continuation:"\\\\\\n":::Text Escape:dq string value:\n\
		sq string value:"'":"'":"\\n":String:value:\n\
		sq string escape:"\\\\([ -~\\0200-\\0377]|[\\l\\d]{1,6}\\s?)":::Text Escape:sq string value:\n\
		sq string continuation:"\\\\\\n":::Text Escape:sq string value:\n\
		operators:"[,/]":::Keyword:value:\n\
		selector id:"#[-\\w]+>":::Label::\n\
		selector class:"\\.[-\\w]+>":::Storage Type::\n\
		selector pseudo class:":(first-child|link|visited|hover|active|focus|lang(\\([-\\w]+\\))?)>":::Storage Type::\n\
		selector attribute:"\\[[^\\]]+\\]":::Ada Attributes::\n\
		selector operators:"[,>*+]":::Keyword::\n\
		selector pseudo element:":(first-letter|first-line|before|after)>":::Text Arg::\n\
		type selector:"<[\\l_][-\\w]*>":::Plain::\n\
		free text:".":::Warning::\n\
	}\n\
	JavaScript:Default\n\
	XML:1:0{\n\
		comment:"\\<!--":"--\\>"::Comment::\n\
		ignored section:"\\<!\\[\\s*IGNORE\\s*\\[":"\\]\\]\\>"::Text Comment::\n\
		declaration:"\\<\\?(?ixml)":"\\?\\>"::Warning::\n\
		declaration delims:"&":"&"::Keyword:declaration:C\n\
		declaration attributes:"((?iversion|encoding|standalone))=":::Keyword:declaration:\n\
		declaration attribute names:"\\1":::Preprocessor:declaration attributes:C\n\
		declaration sq string:"'":"'":"\\n\\n":String1:declaration:\n\
		declaration sq string entity:"&((amp|lt|gt|quot|apos)|#x[\\da-fA-F]*|[\\l_]\\w*);":::Text Escape:declaration sq string:\n\
		declaration dq string:"""":"""":"\\n\\n":String:declaration:\n\
		declaration dq string entity:"&((amp|lt|gt|quot|apos)|#x[\\da-fA-F]*|[\\l_]\\w*);":::Text Escape:declaration dq string:\n\
		doctype:"(\\<!(?idoctype))\\s+(\\<?(?!(?ixml))[\\l_][\\w:-]*\\>?)":"\\>":"\\[":Warning::\n\
		doctype delims:"\\1":"&"::Keyword:doctype:C\n\
		doctype root element:"\\2":::Identifier:doctype:C\n\
		doctype keyword:"(SYSTEM|PUBLIC)":::Keyword:doctype:\n\
		doctype sq string:"'":"'":"\\n\\n":String1:doctype:\n\
		doctype dq string:"""":"""":"\\n\\n":String:doctype:\n\
		processing instruction:"\\<\\?\\S+":"\\?\\>"::Preprocessor::\n\
		processing instruction attribute:"[\\l_][\\w:-]*=((""[^""]*"")|('[^']*'))":::Preprocessor:processing instruction:\n\
		processing instruction value:"\\1":::String:processing instruction attribute:C\n\
		cdata:"\\<!\\[(?icdata)\\[":"\\]\\]\\>"::Text Comment::\n\
		cdata delims:"&":"&"::Preprocessor:cdata:C\n\
		element declaration:"\\<!ELEMENT":"\\>"::Warning::\n\
		element declaration delims:"&":"&"::Keyword:element declaration:C\n\
		element declaration entity ref:"%(?!(?ixml))[\\l_][\\w:-]*;":::Identifier1:element declaration:\n\
		element declaration keyword:"<(ANY|#PCDATA|EMPTY)>":::Storage Type:element declaration:\n\
		element declaration name:"<(?!(?ixml))[\\l_][\\w:-]*":::Identifier:element declaration:\n\
		element declaration operator:"[(),?*+|]":::Keyword:element declaration:\n\
		entity declaration:"\\<!ENTITY":"\\>"::Warning::\n\
		entity declaration delims:"&":"&"::Keyword:entity declaration:C\n\
		entity declaration sq string:"'":"'":"\\n\\n":String1:entity declaration:\n\
		entity declaration sq string entity:"&((amp|lt|gt|quot|apos)|#x[\\da-fA-F]*|[\\l_]\\w*);":::Text Escape:entity declaration sq string:\n\
		entity declaration dq string:"""":"""":"\\n\\n":String:entity declaration:\n\
		entity declaration dq string entity:"&((amp|lt|gt|quot|apos)|#x[\\da-fA-F]*|[\\l_]\\w*);":::Text Escape:entity declaration dq string:\n\
		entity declaration keyword:"SYSTEM|NDATA":::Keyword:entity declaration:\n\
		entity declaration name:"<(?!(?ixml))[\\l_][\\w:-]*":::Identifier:entity declaration:\n\
		parameter entity declaration:"%\\s+((?!(?ixml))[\\l_][\\w:-]*)>":::Keyword:entity declaration:\n\
		parameter entity name:"\\1":::Identifier:parameter entity declaration:C\n\
		notation:"\\<!NOTATION":"\\>"::Warning::\n\
		notation delims:"&":"&"::Keyword:notation:C\n\
		notation sq string:"'":"'":"\\n\\n":String1:notation:\n\
		notation sq string entity:"&((amp|lt|gt|quot|apos)|#x[\\da-fA-F]*|[\\l_]\\w*);":::Text Escape:notation sq string:\n\
		notation dq string:"""":"""":"\\n\\n":String:notation:\n\
		notation dq string entity:"&((amp|lt|gt|quot|apos)|#x[\\da-fA-F]*|[\\l_]\\w*);":::Text Escape:notation dq string:\n\
		notation keyword:"SYSTEM":::Keyword:notation:\n\
		notation name:"<(?!(?ixml))[\\l_][\\w:-]*":::Identifier:notation:\n\
		attribute declaration:"\\<!ATTLIST":"\\>"::Warning::\n\
		attribute declaration delims:"&":"&"::Keyword:attribute declaration:C\n\
		attribute declaration sq string:"'":"'":"\\n\\n":String1:attribute declaration:\n\
		attribute declaration sq string entity:"&((amp|lt|gt|quot|apos)|#x[\\da-fA-F]*|[\\l_]\\w*);":::Text Escape:attribute declaration sq string:\n\
		attribute declaration dq string:"""":"""":"\\n\\n":String:attribute declaration:\n\
		attribute declaration dq string entity:"&((amp|lt|gt|quot|apos)|#x[\\da-fA-F]*|[\\l_]\\w*);":::Text Escape:attribute declaration dq string:\n\
		attribute declaration namespace:"(?ixmlns)(:[\\l_][\\w:]*)?":::Preprocessor:attribute declaration:\n\
		attribute declaration default modifier:"#(REQUIRED|IMPLIED|FIXED)>":::Keyword:attribute declaration:\n\
		attribute declaration data type:"<(CDATA|ENTIT(Y|IES)|ID(REFS?)?|NMTOKENS?|NOTATION)>":::Storage Type:attribute declaration:\n\
		attribute declaration name:"<(?!(?ixml))[\\l_][\\w:-]*":::Identifier:attribute declaration:\n\
		attribute declaration operator:"[(),?*+|]":::Keyword:attribute declaration:\n\
		element:"(\\</?)((?!(?ixml))[\\l_][\\w:-]*)":"/?\\>"::Warning::\n\
		element delims:"\\1":"&"::Keyword:element:C\n\
		element name:"\\2":::Identifier:element:C\n\
		element assign:"=":::Keyword:element:\n\
		element reserved attribute:"(?ixml:(lang|space|link|attribute))(?==)":::Text Key:element:\n\
		element namespace:"(?ixmlns:[\\l_]\\w*)(?==)":::Preprocessor:element:\n\
		element attribute:"[\\l_][\\w:-]*(?==)":::Text Key1:element:\n\
		element sq string:"'":"'":"\\n\\n":String1:element:\n\
		element sq string entity:"&((amp|lt|gt|quot|apos)|#x[\\da-fA-F]*|[\\l_]\\w*);":::Text Escape:element sq string:\n\
		element dq string:"""":"""":"\\n\\n":String:element:\n\
		element dq string entity:"&((amp|lt|gt|quot|apos)|#x[\\da-fA-F]*|[\\l_]\\w*);":::Text Escape:element dq string:\n\
		entity:"&((amp|lt|gt|quot|apos)|#x[\\da-fA-F]*|[\\l_]\\w*);":::Text Escape::\n\
		marked section:"\\<!\\[\\s*(?:INCLUDE|(%(?!(?ixml))[\\l_][\\w:-]*;))\\s*\\[|\\]\\]\\>":::Label::\n\
		marked section entity ref:"\\1":::Identifier:marked section:C\n\
		internal subset delims:"[\\[\\]>]":::Keyword::D\n\
		info:"(?# version 0.1; author/maintainer: Joor Loohuis, joor@loohuis-consulting.nl)":::Comment::D\n\
	}\n\
	CSS:Default\n\
	Regex:Default
nedit.languageModes: 	Ada:.ada .ad .ads .adb .a:::::::\n\
	Awk:.awk:::::::\n\
	C++:.cc .h .C .H .i .cxx .hxx .cpp::::::".,/\\`'!|@#%^&*()-=+{}[]"":;<>?~":\n\
	C:.c::::::".,/\\`'!|@#%^&*()-=+{}[]"":;<>?~":\n\
	CSS:css::Auto:None:::".,/\\`'!|@#%^&*()=+{}[]"":;<>?~":\n\
	Csh:.csh .cshrc .login .logout:"^[ \\t]*#[ \\t]*![ \\t]*/bin/csh"::::::\n\
	Fortran:.f .f77 .for .incl .F .FOR:::::::\n\
	Java:.java:::::::\n\
	JavaScript:.js:::::::\n\
	LaTeX:.tex .sty .cls .dtx .ins:::::::\n\
	Lex:.lex:::::::\n\
	Makefile:Makefile makefile .gmk Makefile.general:::None:8:8::\n\
	Matlab:.m .oct .sci:::::::\n\
	NEdit Macro:.nm .neditmacro:::::::\n\
	Pascal:.pas .p .int:::::::\n\
	Perl:.pl .pm .p5 .PL:"^[ \\t]*#[ \\t]*!.*perl":Auto:None:::".,/\\\\`'!$@#%^&*()-=+{}[]"":;<>?~|":\n\
	PostScript:.ps .eps .epsf .epsi:"^%!":::::"/%(){}[]<>":\n\
	Python:.py:"^#!.*python":Auto:None:::"!""#$%&'()*+,-./:;<=>?@[\\\\]^`{|}~":\n\
	Regex:.reg .regex:"\\(\\?[:#=!iInN].+\\)":None:Continuous::::\n\
	SGML HTML:.sgml .sgm .html .htm:"\\<[Hh][Tt][Mm][Ll]\\>"::::::\n\
	SQL:.sql:::::::\n\
	Sh Ksh Bash:.sh .bash .ksh .profile .bashrc .bash_logout .bash_login .bash_profile:"^[ \\t]*#[ \\t]*![ \\t]*/.*bin/(sh|ksh|bash)"::::::\n\
	Tcl:.tcl .tk .itcl .itk::Smart:None::::\n\
	VHDL:.vhd .vhdl .vdl:::::::\n\
	Verilog:.v:::::::\n\
	XML:.xml .xsl .dtd:"\\<(?i\\?xml|!doctype)"::None:::"<>/=""'()+*?|":\n\
	X Resources:.Xresources .Xdefaults .nedit nedit.rc:"^[!#].*([Aa]pp|[Xx]).*[Dd]efaults"::::::\n\
	Yacc:.y::::::".,/\\`'!|@#%^&*()-=+{}[]"":;<>?~":\n\
	CSS2:css::Auto:None:::".,/\\`'!|@#%^&*()=+{}[]"":;<>?~":
nedit.styles: 	Plain:black:Plain\n\
	Comment:magenta:Bold Italic\n\
	Keyword:blue:Bold\n\
	Storage Type:green3:Bold\n\
	Storage Type1:saddle brown:Bold\n\
	String:darkGreen:Plain\n\
	String1:SeaGreen:Plain\n\
	String2:darkGreen:Bold\n\
	Preprocessor:RoyalBlue4:Plain\n\
	Preprocessor1:blue:Plain\n\
	Character Const:darkGreen:Plain\n\
	Numeric Const:darkGreen:Plain\n\
	Identifier:brown:Plain\n\
	Identifier1:RoyalBlue4:Plain\n\
	Identifier2:SteelBlue:Plain\n\
	Subroutine:brown:Plain\n\
	Subroutine1:chocolate:Plain\n\
	Ada Attributes:plum:Bold\n\
	Class:orange:Bold\n\
	Flag:red:Bold\n\
	Text Comment:SteelBlue4:Italic\n\
	Text Key:VioletRed4:Bold\n\
	Text Key1:VioletRed4:Plain\n\
	Text Arg:RoyalBlue4:Bold\n\
	Text Arg1:SteelBlue4:Bold\n\
	Text Arg2:RoyalBlue4:Plain\n\
	Text Escape:gray30:Bold\n\
	LaTeX Math:darkGreen:Plain\n\
	Pointer:#660000:Bold\n\
	Regex:#009944:Bold\n\
	Class2:RoyalBlue2:Bold\n\
	Warning:brown2:Italic
nedit.smartIndentInit: 	C:Default\n\
	C++:Default\n\
	Python:Default\n\
	Matlab:Default
nedit.smartIndentInitCommon: Default
nedit.autoWrap: None
nedit.wrapMargin: 0
nedit.autoIndent: Smart
nedit.autoSave: True
nedit.openInTab: True
nedit.saveOldVersion: False
nedit.showMatching: Range
nedit.matchSyntaxBased: True
nedit.highlightSyntax: True
nedit.backlightChars: False
nedit.searchDialogs: False
nedit.beepOnSearchWrap: False
nedit.retainSearchDialogs: False
nedit.searchWraps: True
nedit.stickyCaseSenseButton: True
nedit.repositionDialogs: True
nedit.autoScroll: False
nedit.appendLF: True
nedit.sortOpenPrevMenu: True
nedit.statisticsLine: True
nedit.iSearchLine: False
nedit.sortTabs: False
nedit.tabBar: True
nedit.tabBarHideOne: True
nedit.toolTips: True
nedit.globalTabNavigate: False
nedit.lineNumbers: True
nedit.pathInWindowsMenu: True
nedit.warnFileMods: True
nedit.warnRealFileMods: True
nedit.warnExit: True
nedit.searchMethod: Literal
nedit.textRows: 26
nedit.textCols: 45
nedit.tabDistance: 3
nedit.emulateTabs: 3
nedit.insertTabs: False
nedit.textFont: -adobe-helvetica-medium-r-normal--14-140-75-75-p-77-iso8859-1
nedit.boldHighlightFont: -adobe-helvetica-bold-r-normal--14-140-75-75-p-82-iso8859-1
nedit.italicHighlightFont: -adobe-helvetica-medium-o-normal--14-140-75-75-p-78-iso8859-1
nedit.boldItalicHighlightFont: -adobe-helvetica-bold-o-normal--14-140-75-75-p-82-iso8859-1
nedit.textFgColor: black
nedit.textBgColor: rgb:e5/e5/e5
nedit.selectFgColor: black
nedit.selectBgColor: rgb:cc/cc/cc
nedit.hiliteFgColor: white
nedit.hiliteBgColor: red
nedit.lineNoFgColor: black
nedit.cursorFgColor: black
nedit.smartTags: True
nedit.prefFileRead: True
nedit.titleFormat: {%c} [%s] %f (%S) - %d
