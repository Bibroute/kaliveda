% KaliVeda User's Guide

# Particles and Nuclei #

## Defining kinematical reference frames ##

### Lorentz boosts and rotations ###

In order to obtain the energy, velocity, direction, etc. of a nucleus in a different Lorentz frame,
use the `SetFrame()` and `GetFrame()` methods of class [`KVParticle`{.cpp}][KVParticle].
What these do is to define a new frame of reference in which to describe the particle, which can be Lorentz-boosted
and/or rotated with respect to the original frame. Each frame is given an unique name: when a kinematical quantity
is required in a given frame, one simply retrieves a pointer to a "copy" of the particle in the other frame:

~~~~~~~~~~~{.cpp}
// velocity vector of boosted frame w.r.t. original frame, magnitude = 0.98c
TVector3 some_boost(0,0,0.98);

// define new frame - "part" is a pointer to a KVParticle-derived object
part->SetFrame( "boosted_frame", some_boost, kTRUE );

// use new frame to find e.g. polar angle in boosted frame
Double_t theta_boost = part->GetFrame( "boosted_frame" )->GetTheta();
~~~~~~~~~~~~

You can define reference frames for all particles in an event using the equivalent
`KVEvent::SetFrame()`{.cpp} methods of class [`KVEvent`{.cpp}][KVEvent]:

~~~~~~~~~~~{.cpp}
// velocity vector of boosted frame w.r.t. original frame [in cm/ns]
TVector3 another_boost(-2.6,1.2,3.5);

// define new frame for all particles - "event" is a pointer to a KVEvent-derived object
// 3rd argument = kFALSE by default : boost is in cm/ns
event->SetFrame( "BoostFrame", another_boost );

KVNucleus* N;
while ( N = event->GetNextParticle() ){

	// transverse energy of each particle in boosted frame
   Double_t et = N->GetFrame("BoostFrame")->GetEtrans();
	...
}
~~~~~~~~~~~~

*NOTE* : when analysing data using an analysis class derived from [`KVSelector`{.cpp}][KVSelector],
the centre of mass frame corresponding to the analysed system is automatically defined and can be
used immediately: `part->GetFrame("CM")`{.cpp}.

### Combinations of boosts/rotations ###

Here is another example of using different frames, with the CM momentum tensor which can be calculated
using the [global variable](globalvariables.html) [`KVTensPCM`{.cpp}][KVTensPCM].
Once this has been filled with all particles' momenta,
the rotation of the CM axes necessary to make them coincide with the eigenvectors of the tensor can be obtained like so:

~~~~~~~~~~{.cpp}
//pointer to the tensor global variable
KVTensPCM* tens_cm;
 
TRotation rot; // a rotation

// the rotation is defined according to the tensor's eigenvectors
tens_cm->GetTensor()-> GetRotation( rot );
~~~~~~~~~~

The "ellipsoid" frame corresponds to a rotation of the centre of mass frame.
There are two ways to access the particles' coordinates in this frame.
You can set it up with a combination of a boost and a rotation applied to the laboratory momenta:

~~~~~~~~~~{.cpp}
// pointer to the event
KVEvent* event;

// velocity vector of CM frame, e.g. in cm/ns units
TVector3 vcm;

// define "tensor" frame with CM velocity and rotation of axes
event->SetFrame("tensor", vcm, rot );
~~~~~~~~~~~~

Or, as the centre of mass frame already exists (we will assume, as when using a [`KVSelector`{.cpp}][KVSelector]
analysis class that the frame is called `"CM"`), you can apply the rotation to the centre of mass momenta directly:

~~~~~~~~~~{.cpp}
// define "tensor" frame by rotating axes of "CM" frame
event->SetFrame("tensor2", "CM", rot );
~~~~~~~~~~~

The difference between the two approaches is that the `"tensor"` frame is directly accessible from the particle,
whereas `"tensor2"` is a sub-frame of the `"CM"` frame:

~~~~~~~~{.cpp}
// i-th particle of the event
KVNucleus* nuc = event-> GetParticle(i);

// velocity parallel to Z-axis in tensor frame
nuc->GetFrame("tensor")-> GetVpar();

// "tensor2" is a frame resulting from rotation of previously defined "CM" frame
nuc->GetFrame("CM")->GetFrame("tensor2")->GetPhi();
~~~~~~~~

## Labelling & sorting particles ('groups') ##

## Storing/retrieving *ad hoc* information with particles #

[KVParticle]: http://indra.in2p3.fr/KaliVedaDoc/KVParticle.html
[KVTensPCM]: http://indra.in2p3.fr/KaliVedaDoc/KVTensPCM.html
[KVEvent]: http://indra.in2p3.fr/KaliVedaDoc/KVEvent.html
[KVSelector]: http://indra.in2p3.fr/KaliVedaDoc/KVSelector.html
