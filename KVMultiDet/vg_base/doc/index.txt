BEGIN_HTML
<h1>Global Variables for analysis of multibody events</h1>
END_HTML
A global variable is an analysis tool for condensing the information in a multibody event into one or a few
characteristic values. A simple example is the event multiplicity (the number of particles in each event),
which can be used to characterize heavy-ion collision events in terms of violence or centrality.

In KaliVeda, the base class for a multibody event is KVEvent, which is basically a collection of
nuclei (base class KVNucleus). Therefore the global variable classes below can be used with any
event described by a class derived from KVEvent, containing particles described by a class which
inherits from KVNucleus.

The list of classes below are base classes used for implementing global variables. KVVarGlob implements
the basic interface. KVVarGlob1 is a specialised base class for global variables which calculate a single
representative value. KVVarGlobMean is a further specialisation for variables which calculate the mean
value and variance of some quantity. KVVGSum is a very flexible class which can be easily configured to
calculate user-defined global variables. KVGVList handles lists of global variables.

BEGIN_HTML
<h2>Using Global Variables in Data Analysis</h2>
END_HTML
All user analysis classes for analysing multibody event data (KVEvent objects) inherit from KVSelector,
which manages a list of global variables (a KVGVList). Users can add global variables to this list in their
InitAnalysis() or InitRun() method by calling method

	KVVarGlob* KVSelector::AddGV(const Char_t* class_name, const Char_t* name)

For every event which is analysed, the list of global variables defined by the user is calculated automatically
by KVSelector just before calling the user's Analysis() method. Therefore, in Analysis(),
one may retrieve the value(s) of each global variable for the event by using method

	KVVarGlob* KVSelector::GetGV(const Char_t* name)

BEGIN_HTML
<h3>Automatic creation and filling of TTree branches with global variable values</h3>
END_HTML
The KVGVList class provides methods to automatically create a branch for the value of each global
variable in the list. In your analysis (KVSelector) class, you can get a pointer to the internal list of
global variables using method

	KVGVList* KVSelector::GetGVList()
	
Then in your InitAnalysis() or InitRun() method, after creating a TTree and filling the list of global
variables with AddGV(), you can create the necessary branches in your TTree like so:

	TTree* myTree = new TTree(...);
	AddGV(...);
	AddGV(...);
	GetGVList()->MakeBranches(t);
	
In your Analysis() method in order to fill the branches with the values of all the variables for the current
event you just need to call

	GetGVList()->FillBranches();
	myTree->Fill();
	
BEGIN_HTML
<h2>Make your own global variable classes</h2>
END_HTML
If you want to implement a new global variable, there are two possibilities. 
First, check that what you want to do is not possible with the KVVGSum class.
If not, you can write your own global variable class. You need to decide first of all which base class to use
(looking at the inheritance of existing global variables may help you make your choice).
If your global variable will calculate the mean (and possibly also the variance) of some quantity, the
base class to use is KVVarGlobMean.
If your global variable will calculate a single value, use KVVarGlob1.
If neither of the previous two cases apply, use the most general base class, KVVarGlob.

Next, decide if your global variable is of type 1-body (calculation based on properties of individual
particles of the event, independently of the others), 2-body (calculation based on correlations between
pairs of particles), or N-body (multibody correlations) (looking at existing classes may help to decide).

Then, use one of the following methods at the ROOT command line in order to generate skeleton '.h' and
'.cpp' files for your class:

	root[0]  KVVarGlob::MakeClass("MyClassName", "The description of my class", type)
	root[0]  KVVarGlob1::MakeClass("MyClassName", "The description of my class", type)
	root[0]  KVVarGlobMean::MakeClass("MyClassName", "The description of my class", type)
	
with 'type' equal to one of KVVarGlob::kOneBody, KVVarGlob::kTwoBody, KVVarGlob::kNBody.

When you have modified the skeleton according to your needs (see comments in generated code for help),
you can test the compilation of your class in a ROOT interactive session:

	root[0]  KVBase::InitEnvironment()
	root[0]  .L MyClassName.cpp+
	
BEGIN_HTML
<h3>Using your own global variables in a KVSelector data analysis class</h3>
END_HTML
You need to set up your environment correctly in order to tell ROOT where to find the sources for
your global variables (this is essential for analysis tasks to run in batch mode), and in order to add
your variables to the list available for KaliVeda analysis.

First modify (or create if it doesn't exist) your '.rootrc' file, adding/modifying the following line:

	+Unix.*.Root.MacroPath:   /full/path/to/directory/with/source/files
	+ACLiC.IncludePaths:     -I/full/path/to/directory/with/source/files
	
You can use environment variables in this definition, as long as you enclose them in '$()', e.g. '$(HOME)'.
If you have several source directories, you can put them together:

	+Unix.*.Root.MacroPath:   /first/path:/second/path:/another/path
	+ACLiC.IncludePaths:     -I/first/path -I/second/path -I/another/path
	
After relaunching ROOT, you will now be able to compile your class(es) even if you launch ROOT
in a different directory.

Next, modify (or create if it doesn't exist) your '.kvrootrc' file, adding for each of your global variables
a line like this:

	+Plugin.KVVarGlob:  MyClassName   MyClassName  MyClassName.cpp+  "MyClassName()"
	
Then you can use your global variable in an analysis in exactly the same way as other variables:

	[in your analysis class .cpp file]
	#include "MyClassName.h"
	...
	MyClassName* myvg = (MyClassName*)AddGV("MyClassName", "myVarGlob");
